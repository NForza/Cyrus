import { Injectable } from '@angular/core';
import * as signalR from '@microsoft/signalr';
import { Observable, Subject, BehaviorSubject } from 'rxjs';
{{ for i in Imports }}
import { {{ i }} } from './{{ i }}';{{ end }}

@Injectable({
  providedIn: 'root',
})
export class {{ Name }}Service {
  private hubConnection: signalR.HubConnection;

{{ for q in Queries }}
  private _{{ q.Name | camel_case }}Result: BehaviorSubject<{{ query_return_type q }}> = new BehaviorSubject<{{ query_return_type q }}>({{ q.ReturnType | to_typescript_default }});
{{ end }}
{{ for e in Events }}
  private _{{ e | camel_case }}Subject: Subject<{{ e }}> = new Subject<{{ e }}>();
{{ end }}

  constructor() {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl('https://localhost:7166{{ Path }}') 
      .configureLogging(signalR.LogLevel.Information)
      .build();
    {{ for e in Events }}
    this.hubConnection.on('{{ e | camel_case }}', (data: {{e}}) => {
      console.log('Received {{e}}:', data);
      this._{{ e | camel_case }}Subject.next(data);
    });
    {{ end }}
    {{ for q in Queries }}  
    this.hubConnection.on('{{ q.Name | camel_case }}Result', (data : {{ query_return_type q }}) => {
      console.log('Received {{e}}:', data);
      this._{{ q.Name | camel_case }}Result.next(data);
    });
    {{ end }}
    this.hubConnection.onclose((error) => {
      console.error('SignalR connection closed:', error);
    });
  }

  public startConnection(): void {
    this.hubConnection
      .start()
      .then(() => {
        console.log('SignalR Connected');
      })
      .catch((err) => {
        console.error('SignalR Connection Error:', err);
      });
  }
  {{ for c in Commands }}  
  public {{ c | camel_case }}(command: {{ c }} ): void {
    console.log('Sending {{ c | camel_case }}');           
    this.hubConnection.invoke('{{ c | camel_case }}', command).catch((err) => {
      console.error('Error sending {{ c | camel_case }}:', err);
    });
  } {{ end }}
  {{ for q in Queries }}  
  public {{ q.Name | camel_case }}(query: {{ q.Name }} ): void {
    console.log('Sending {{ q.Name | camel_case }}');
    this.hubConnection.invoke('{{ q.Name | camel_case }}', query).catch((err) => {
      console.error('Error sending {{ q.Name | camel_case }}:', err);
    });
  }

  public get {{ q.Name | camel_case }}Result(): Observable<{{ query_return_type q }}> {
    return this._{{ q.Name | camel_case }}Result;
  }
  {{ end }}

  {{ for e in Events }}
  public get on{{ e | strip_postfix }}(): Observable<{{ e }}> {
    return this._{{ e | camel_case }}Subject;
  }
  {{ end }}
}