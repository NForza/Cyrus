using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Text.Json.Serialization;

namespace {{ Namespace }};

[JsonSerializable(typeof({{ Name | as-contract }}))]
public class {{ Name | as-contract }}
{
{%- for prop in Properties %}
	{% if prop.IsNullable == false %}[Required]{% endif %}
	{% if prop.Internal == true %}internal{% else %}public{% endif %} {{ prop.Type }}{% if prop.IsNullable == false %}?{% endif %} {{ prop.Name }} { get; set; } {%- if prop.DefaultValue %} = {{ prop.DefaultValue }}; {%- endif %}
{% endfor -%}

	internal IEnumerable<string> ValidationErrors
	{
		get
		{
			var errors = new List<string>();
			{%- for prop in Properties %}
				{% if prop.IsNullable == false -%}
				if ({{ prop.Name }} == null)
				{
					errors.Add("{{ prop.Name }} is required.");
				}
				{%- endif -%}
			{% endfor %}
			return errors;
		}
	}

	public {{ FullName }} As{{ Name }}()
	{
		return new {{ FullName }}(
			{%- for prop in ConstructorArguments %}
			this.{{ prop.Name }}{% if prop.UseExclamation %}!{% else %}.Value{% endif %}{% unless forloop.last %},{% endunless %}
			{% endfor -%}
		)
		{% if ConstructorProperties.size > 0 -%}
		{
			{%- for prop in ConstructorProperties %}
			{{ prop.Name }} = {% if prop.UseExclamation %}({{ prop.Type }}){% endif %}{{ prop.Name }}{% if prop.UseExclamation %}!{% else %}.Value{% endif %}{% unless forloop.last %},{% endunless %}
			{%- endfor %}
		}
		{%- endif -%}
		;
	}
 }