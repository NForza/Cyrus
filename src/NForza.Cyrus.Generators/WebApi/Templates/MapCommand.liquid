    app.Map{{ Verb }}("{{ Path }}", {% if IsAsync %}async {% endif %}({% if HasBody %}[FromBody] {{ CommandType }}Contract command, {% endif -%} [FromServices] IEventBus eventBus, [FromServices] IHttpContextObjectFactory objectFactory, [FromServices] IHttpContextAccessor ctx) =>
    {
        {% if HasBody == false %}{{ CommandType }}Contract command = new();{% endif %}
        using var scope = app.Services.CreateScope();
        var services = scope.ServiceProvider;
        var cmd = objectFactory
            .CreateFromHttpContextWithBodyAndRouteParameters<{{ CommandType }}Contract>(ctx.HttpContext, command)
            .As{{ CommandName }}();
        if (!ObjectValidation.Validate<{{ CommandType }}>(command, services, out var problem))
            return Results.BadRequest(problem);
        {% if HasReturnType %}var commandResult = {% endif %}{% if IsAsync %}await {% endif %}{{ CommandInvocation }};
        return new CommandResultAdapter(eventBus).{{ AdapterMethod }}({% if HasReturnType %}commandResult{% endif %});
    })
    .WithSwaggerParameters("{{Path}}");
