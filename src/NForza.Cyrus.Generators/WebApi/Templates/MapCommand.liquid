    app.Map{{ Verb }}("{{ Path }}", {% if ReturnsTask %}async {% endif %}({% if HasBody %}[FromBody] {{ CommandType | as-contract }} command, {% endif -%} [FromServices] IEventBus eventBus, [FromServices] IHttpContextObjectFactory objectFactory, [FromServices] IHttpContextAccessor ctx) =>    {
        {% if HasBody == false %}{{ CommandType | as-contract }} command = new();{% endif %}
        using var scope = app.Services.CreateScope();
        var services = scope.ServiceProvider;
        var (cmd, validationErrors) = objectFactory
            .CreateFromHttpContextWithBodyAndRouteParameters<{{ CommandType | as-contract }}, {{ CommandType }}>(ctx.HttpContext, command);
        if (validationErrors.Any())
            return Results.BadRequest(validationErrors);
        {%- if ValidatorMethod != nil %}
        {%- if ValidatorMethodIsStatic %}
        validationErrors = {{ ValidatorClass }}.{{ ValidatorMethodName }}(cmd);
        {% else %}
        var validator = services.GetRequiredService<{{ ValidatorClass }}>();
        validationErrors = validator.{{ ValidatorMethodName }}(cmd);
        {% endif %}
        if (validationErrors.Any())
        {
            return Results.BadRequest(validationErrors);
        }
        {% endif %}

        {% if HasReturnType %}var commandResult = {% endif %}{% if ReturnsTask %}await {% endif %}{{ CommandInvocation }};
        return new CommandResultAdapter(eventBus).{{ AdapterMethod }}({% if HasReturnType %}commandResult{% endif %});
    })
    .WithOpenApi()
    {%- if Attributes.size > 0 -%}
    .WithMetadata([
    {%- for attr in Attributes %}
        {{ attr }}{% unless forloop.last %},{% endunless %}
    {% endfor %}])
    {% endif -%};
