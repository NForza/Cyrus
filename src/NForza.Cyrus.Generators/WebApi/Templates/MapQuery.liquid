    app.MapGet("{{ Path }}", {% if ReturnsTask %}async {% endif %}( {{ RouteParameters }} [FromServices] IHttpContextObjectFactory objectFactory, [FromServices] IHttpContextAccessor ctx, CancellationToken cancellationToken) =>
    {
        using var scope = app.Services.CreateScope();
        var services = scope.ServiceProvider;
        ({{ Query }} query, IEnumerable<string> validationErrors) = objectFactory.CreateFromHttpContextWithRouteParameters<{{ Query | as-contract }}, {{ Query }}>(ctx.HttpContext);
        if (validationErrors.Any())
            return Results.BadRequest(validationErrors);
        {% if ValidatorMethod != nil %}
        {% if ValidatorMethodIsStatic %}
        validationErrors = {{ ValidatorClass }}.{{ ValidatorMethodName }}(query);
        {% else %}
        var validator = services.GetRequiredService<{{ ValidatorClass }}>();
        validationErrors = validator.{{ ValidatorMethodName }}(query);
        {% endif %}
        if (validationErrors.Any())
        {
            Results.BadRequest(validationErrors);
        }
        {% endif %}
        var queryResult = {% if ReturnsTask %}await {% endif %}{{ QueryInvocation }};
        return QueryResultAdapter.FromObject(queryResult);
    })
    .WithOpenApi()
    {%- if Attributes.size > 0 -%}
    .WithMetadata([
    {%- for attr in Attributes %}
        {{ attr }}{% unless forloop.last %},{% endunless %}
    {% endfor %}])
    {% endif -%}
    .Produces<{{ ReturnType }}>();
