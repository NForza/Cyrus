using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.SignalR;
using NForza.Cyrus.Cqrs;
using NForza.Cyrus.SignalR;
using Microsoft.Extensions.DependencyInjection;

namespace {{ Namespace }};

public class {{ Name | generated_hub_name }}(IServiceProvider services, IQueryProcessor queryProcessor, ICommandDispatcher commandDispatcher) : CyrusHub
    (
      [
      {% for e in Events -%}
        (typeof({{ e.FullTypeName }}), {{ e.Broadcast }}){% unless forloop.last %}, {% endunless -%}
      {% endfor %}
      ]
    )
{   
    {% for cmd in Commands -%}
        public async Task {{ cmd.MethodName }} ({{ cmd.FullTypeName }} command)
        {       
          {% if cmd.ReturnsEvents %}var cmdResult = {% endif %}await commandDispatcher.Handle(command);
          {% if cmd.ReturnsEvents %}
          SendEvents(cmdResult.Events);
          {%- endif %}
        }
    {% endfor %}
    {%- for q in Queries %}
        public async Task {{ q.MethodName }}({{ q.FullTypeName }} query) 
        {
            var result = await queryProcessor.Query(query);
            await SendQueryResultReply("{{ q.MethodName }}", result);
        }
    {% endfor %}
}