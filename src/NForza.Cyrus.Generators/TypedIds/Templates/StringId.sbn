using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Text.Json.Serialization;
using NForza.Cyrus.Abstractions;

namespace {{ Namespace }};

[JsonConverter(typeof({{ Name }}JsonConverter))]
[TypeConverter(typeof({{ Name }}TypeConverter))]
[DebuggerDisplay("{Value}")]
public partial record struct {{ Name }}(string Value): ITypedId
{
    public static {{ Name }} Empty => new {{ Name }}(string.Empty);
    public bool IsEmpty() => string.IsNullOrEmpty(Value);
    public static implicit operator {{ UnderlyingType}}({{ Name }} typedId) => typedId.Value;
    public static explicit operator {{ Name }}({{ UnderlyingType }} value) => new(value);
    public bool IsValid() => !string.IsNullOrEmpty(Value){{ if HasMinimum }} && Value.Length >= {{ Minimum }}{{ end }}{{ if HasMaximum }} && Value.Length <= {{ Maximum }}{{ end }};
    public override string ToString() => Value?.ToString();
}
