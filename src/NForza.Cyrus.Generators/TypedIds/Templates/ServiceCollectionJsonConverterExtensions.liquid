using Microsoft.Extensions.DependencyInjection;
using NForza.Cyrus.Cqrs;
using System.Text.Json.Serialization;
{% for i in Imports %} 
using {{ i }};
{% endfor %}

namespace NForza.Cyrus.Abstractions;

public static class ServiceCollectionJsonConverterExtensions
{
    public static IServiceCollection AddJsonConverters(this IServiceCollection services)
    {
{% for t in Types %}        
  services.AddTransient<JsonConverter, {{ t.Name }}JsonConverter>();
{% endfor %}
        return services;
    }

    private static Dictionary<Type, Type> allTypes = new() {
        {% for t in Types %}        
        [typeof({{ t.Name }})] = typeof({{ t.UnderlyingType }}){% unless forloop.last %}, {% endunless -%}
        {% endfor %}
    };

    public static CyrusOptions AddTypedIdSerializers(this CyrusOptions options)
    {
        options.Services.AddSingleton(sp => new TypedIdDictionary(allTypes));
        options.Services.AddJsonConverters();
        return options;
    }
}