using System;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.DependencyModel;
using NForza.Cyrus.Abstractions;
using NForza.Cyrus.Abstractions.Model;
using NForza.Cyrus.WebApi.Policies;

{% for i in Imports %}
using {{ i }};
{% endfor %}

namespace NForza.Cyrus.Cqrs;

#nullable enable

public static class CyrusServiceCollectionExtensions
{
    public static IServiceCollection AddCyrus(this IServiceCollection services)
    {
        services.AddSingleton<ICommandDispatcher, CommandDispatcher>();
        services.AddScoped<ICqrsFactory, HttpContextCqrsFactory>();
        services.AddSingleton<IQueryProcessor, QueryProcessor>();
        services.AddSingleton<ICommandBus, LocalCommandBus>();
        services.AddSingleton<DefaultCommandInputMappingPolicy>();
        services.AddHttpContextAccessor();



        services.Scan(scan => scan
            .FromDependencyContext(DependencyContext.Default!)
            .AddClasses(classes => classes.AssignableTo<ICyrusModel>())
            .AsImplementedInterfaces()
            .WithTransientLifetime());

        {{ RegisterEventBus }}
        services.AddSingleton(BuildCommandHandlerDictionary());
        services.AddSingleton(BuildQueryHandlerDictionary());
        services.AddSingleton(BuildEventHandlerDictionary());
        services.AddSingleton(BuildQueryFactoryDictionary());
        {{ RegisterHandlerTypes }}
        return services;
    }

    public static CommandHandlerDictionary BuildCommandHandlerDictionary()
    {
        var handlers = new CommandHandlerDictionary();
        {{ RegisterCommandHandlers }}
        return handlers;
    }

    public static QueryHandlerDictionary BuildQueryHandlerDictionary()
    {
        var handlers = new QueryHandlerDictionary();
        {{ RegisterQueryHandlers }}
        return handlers;
    }

    public static EventHandlerDictionary BuildEventHandlerDictionary()
    {
        var handlers = new EventHandlerDictionary();
        {{ RegisterEventHandlers }}
        return handlers;
    }

    public static WebCqrsFactoryDictionary BuildQueryFactoryDictionary()
    {
        var x = new WebCqrsFactoryDictionary();
        {{ RegisterQueryFactory }}
        return x;
    }    
}