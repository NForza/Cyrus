using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using NForza.Cyrus.Aggregates;

namespace NForza.Cyrus.Cqrs;

public static class CommandDispatcherExtensions
{
{% for cmd in Commands %}
    public static async Task{% if cmd.ReturnsVoid == false %}<{{ cmd.ReturnType }}>{% endif %} Handle(this ICommandDispatcher commandDispatcher, {{ cmd.CommandType }} command, CancellationToken cancellationToken = default) 
    { 
{% if cmd.AggregateRoot -%}
        var aggregateRootPersistence = commandDispatcher.Services.GetRequiredService<IAggregateRootPersistence<{{ cmd.AggregateRootType }}, {{ cmd.AggregateRootIdPropertyType }}>>();
        var aggregateRoot = await aggregateRootPersistence.Load(command.{{ cmd.AggregateRootIdPropertyName }});
{% endif -%}
{% if cmd.ReturnsVoid == false -%}
        var result = 
{%- endif -%}
{%- if cmd.ReturnsTask -%}
    await 
{%- else -%}
    {{ cmd.Invocation }};
{% endif %};
{% if cmd.AggregateRoot -%}
        await aggregateRootPersistence.Save(aggregateRoot);
{% endif -%}
{% if cmd.ReturnsVoid == false -%}
        return result;
{%- endif %}
    }
{% endfor %}
}