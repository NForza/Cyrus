using System;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;

namespace NForza.Cyrus.Cqrs;

public static class CommandDispatcherExtensions
{
{% for cmd in Commands %}
    public static {% if cmd.ReturnsTask %}async{% endif %} Task{% if cmd.ReturnsVoid == false %}<{{ cmd.ReturnType }}>{% endif %} Handle(this ICommandDispatcher commandDispatcher, {{ cmd.CommandType }} command, CancellationToken cancellationToken = default) 
        {% if cmd.ReturnsVoid %} { {% else %} => {% endif %} 
                {%- if cmd.ReturnsTask %}await {{ cmd.Invocation }}{% else %}
                   {% if cmd.ReturnsVoid == false %}
                      Task.FromResult<{{ cmd.ReturnType }}>({{ cmd.Invocation }})
                    {% else %}
                      {{ cmd.Invocation }}; return Task.CompletedTask
                    {% endif %}
                {% endif %};
           {%- if cmd.ReturnsVoid %} } {% endif %} 
{% endfor %}
}