using System;
using System.Text.Json;
using System.Text.Json.Serialization;

{% if Namespace != "" %}
namespace {{ Namespace }};
{% endif -%}

public class {{ Name }}JsonConverter : JsonConverter<{{ Name }}>
{
    public override {{ Name }} Read(
        ref Utf8JsonReader reader,
        Type typeToConvert,
        JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.Null)
        {
            return default;
        }

        if (reader.TokenType != JsonTokenType.String)
            throw new JsonException($"Expected string, found {reader.TokenType}.");

        string? raw = reader.GetString();          
        if (!Guid.TryParse(raw, out Guid guid))
            throw new JsonException(
                $"\"{raw}\" is not a valid GUID for type {{ Name }}.");

        return new {{ Name }}(guid);
    }

    public override void Write(
        Utf8JsonWriter writer,
        {{ Name }} value,
        JsonSerializerOptions options)
    {
        writer.WriteStringValue(value.Value.ToString("D")); // “D” = 32 digits + 4 hyphens
    }
}
