using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
using NForza.Generators;

namespace NForza.Cyrus.Generators;

public class TemplateEngine(Assembly assembly, string folderName)
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("MicrosoftCodeAnalysisCorrectness", "RS1035:Do not use APIs banned for analyzers", Justification = "<Pending>")]
    public string ReplaceInResourceTemplate(string templateName, Dictionary<string, string> replacements, string[]? allowedMarkersAfterReplace = null)
    {
        string template = EmbeddedResourceReader.GetResource(assembly, folderName, templateName);
        return ReplaceInString(templateName, template, replacements, allowedMarkersAfterReplace);
    }

    public string ReplaceInString(string templateName, string source, Dictionary<string, string> replacements, string[]? allowedMarkersAfterReplace = null)
    {
        foreach (var replacement in replacements)
        {
            string replacementMarker = "% " + replacement.Key + " %";
            Console.WriteLine(source.Contains(replacementMarker));
            source = source.Replace(replacementMarker, replacement.Value);
        }
        ThrowIfTemplateHasUnresolvedMarkers(templateName, source, allowedMarkersAfterReplace);
        string generatorName = assembly.GetName().Name;
        if (allowedMarkersAfterReplace?.Length > 0)
        {
            return source;
        }
#pragma warning disable RS1035 // Do not use APIs banned for analyzers
        return $"// Do not modify. This file is auto-generated by {generatorName}{Environment.NewLine}{source}";
#pragma warning restore RS1035 // Do not use APIs banned for analyzers
    }

    private void ThrowIfTemplateHasUnresolvedMarkers(string templateName, string source, string[]? allowedMarkersAfterReplace = null)
    {
        Regex regex = new("% [a-zA-Z0-9_]{1,30} %");
        MatchCollection matches = regex.Matches(source);

        allowedMarkersAfterReplace ??= [];

        var unresolvedMarkers = matches
            .Cast<Match>()
            .Select(m => m.Value.Trim('%', ' '))
            .Where(marker => !allowedMarkersAfterReplace.Contains(marker))
            .ToList();

        if (unresolvedMarkers.Count > 0)
        {
            throw new InvalidOperationException($"The template {templateName} has unresolved markers: {string.Join(", ", unresolvedMarkers)}");
        }
    }
}
