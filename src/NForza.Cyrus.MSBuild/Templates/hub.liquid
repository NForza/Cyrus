import { Injectable } from '@angular/core';
import * as signalR from '@microsoft/signalr';
import { Observable, Subject, BehaviorSubject } from 'rxjs';
{%- for i in Imports %}
import { {{ i }} } from './{{ i }}';
{%- endfor %}

@Injectable({
  providedIn: 'root',
})
export class {{ Name }}Service {
  private hubConnection: signalR.HubConnection;

{%- for q in Queries %}
  private _{{ q.Name | camel-cased }}Result: BehaviorSubject<{{ q | query_return_type }}> = new BehaviorSubject<{{ q | query_return_type }}>({{ q.ReturnType | to_typescript_default }});
{%- endfor %}
{%- for e in Events %}
  private _{{ e | camel-cased }}Subject: Subject<{{ e }}> = new Subject<{{ e }}>();
{%- endfor %}

  constructor() {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl('https://localhost:7166{{ Path }}') 
      .configureLogging(signalR.LogLevel.Information)
      .build();
    {%- for e in Events %}
    this.hubConnection.on('{{ e | camel-cased }}', (data: {{e}}) => {
      console.log('Received {{e}}:', data);
      this._{{ e | camel-cased }}Subject.next(data);
    });
    {%- endfor %}
    {%- for q in Queries %}  
    this.hubConnection.on('{{ q.Name | camel-cased }}Result', (data : {{ q | query_return_type}}) => {
      console.log('Received {{e}}:', data);
      this._{{ q.Name | camel-cased }}Result.next(data);
    });
    {%- endfor %}
    this.hubConnection.onclose((error) => {
      console.error('SignalR connection closed:', error);
    });
  }

  public startConnection(): void {
    this.hubConnection
      .start()
      .then(() => {
        console.log('SignalR Connected');
      })
      .catch((err) => {
        console.error('SignalR Connection Error:', err);
      });
  }
  {%- for c in Commands %}  
  public {{ c | camel-cased }}(command: {{ c }} ): void {
    console.log('Sending {{ c | camel-cased }}');           
    this.hubConnection.invoke('{{ c | camel-cased }}', command).catch((err) => {
      console.error('Error sending {{ c | camel-cased }}:', err);
    });
  }
  {%- endfor %}
  {%- for q in Queries %}  
  public {{ q.Name | camel-cased }}(query: {{ q.Name }} ): void {
    console.log('Sending {{ q.Name | camel-cased }}');
    this.hubConnection.invoke('{{ q.Name | camel-cased }}', query).catch((err) => {
      console.error('Error sending {{ q.Name | camel-cased }}:', err);
    });
  }

  public get {{ q.Name | camel-cased }}Result(): Observable<{{ q | query_return_type }}> {
    return this._{{ q.Name | camel-cased }}Result;
  }
  {%- endfor %}

  {%- for e in Events %}
  public get on{{ e | strip_postfix }}(): Observable<{{ e }}> {
    return this._{{ e | camel-cased }}Subject;
  }
  {%- endfor %}
}