name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '7.0'  # Use your desired .NET version

    name: Update PackageVersion and Publish

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0'

    - name: Extract and Update PackageVersion
      id: update_version
      run: |
        pwsh -Command "
        # Load the .csproj file
        [xml]$xml = Get-Content 'MyProject.csproj';

        # Extract the existing PackageVersion
        $packageVersion = $xml.Project.PropertyGroup.PackageVersion;
        if (-not $packageVersion) {
          Write-Error 'PackageVersion not found in the .csproj file';
          exit 1;
        }

        # Split the version into Major.Minor.Patch
        $parts = $packageVersion -split '\\.';
        $majorMinor = $parts[0..1] -join '.';

        # Update the revision with the GitHub run ID
        $newVersion = \"$majorMinor.${{ github.run_id }}\";
        Write-Host \"Updated PackageVersion: $newVersion\";
        $xml.Project.PropertyGroup.PackageVersion = $newVersion;

        # Save the updated .csproj file
        $xml.Save('MyProject.csproj');

        # Export the new version as an environment variable
        Write-Output \"new_version=$newVersion\" >> $env:GITHUB_ENV;
        "
        
    - name: Restore dependencies
      run: dotnet restore

    - name: Build the project
      run: dotnet build --configuration Release

    - name: Pack the NuGet package
      run: dotnet pack --configuration Release --output ./output /p:PackageVersion=${{ env.new_version }}

    - name: Push to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push ./output/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json
