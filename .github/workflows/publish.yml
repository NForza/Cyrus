name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    branches:
      - main  

env:
  BASE_VERSION: "1.0"
  NFORZA_CYRUS_NUSPEC: ./src/NForza.Cyrus.nuspec

jobs:
  publish:
    name: Publish Package
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Calculate package version
      run: |
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        if [ "${GITHUB_REF_NAME}" = "main" ]; then
          echo "PACKAGE_VERSION=${BASE_VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
        else
          echo "PACKAGE_VERSION=${BASE_VERSION}.${GITHUB_RUN_NUMBER}-beta-${TIMESTAMP}" >> $GITHUB_ENV
        fi

    - name: Show package version
      run: |
        echo "Version: ${{ env.PACKAGE_VERSION }}"
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '9.0'

    - uses: nuget/setup-nuget@v2
      with:
        nuget-version: 'latest'

    - name: Set NForza.Cyrus version
      run: sed -i 's/%VERSION%/${{ env.PACKAGE_VERSION }}/g' ${{ env.NFORZA_CYRUS_NUSPEC }}

    - name: Restore dependencies
      run: dotnet restore "./NForza.Cyrus.sln"

    - name: Build the project
      run: dotnet build --configuration Release "./NForza.Cyrus.sln" /p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack the Core project
      run: dotnet pack --configuration Release --output ./output "./src/NForza.Cyrus.Core/NForza.Cyrus.Core.csproj" /p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack the Generators project
      run: dotnet pack --configuration Release --output ./output "./src/NForza.Cyrus.Generators/NForza.Cyrus.Generators.csproj" /p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack the Abstractions project
      run: dotnet pack --configuration Release --output ./output "./src/NForza.Cyrus.Abstractions/NForza.Cyrus.Abstractions.csproj" /p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack the MassTransit project
      run: dotnet pack --configuration Release --output ./output "./src/NForza.Cyrus.MassTransit/NForza.Cyrus.MassTransit.csproj" /p:PackageVersion=${{ env.PACKAGE_VERSION }}

    - name: Pack the Templating project
      run: dotnet pack --configuration Release --output ./output "./src/NForza.Cyrus.Templating/NForza.Cyrus.Templating.csproj" /p:PackageVersion=${{ env.PACKAGE_VERSION }}
    
    - name: Install Mono
      run: |
        sudo apt-get update
        sudo apt-get install -y mono-complete
    
    - name: Pack the Metapackage
      run: |
        nuget pack ./src/NForza.Cyrus.nuspec \
          -Version ${{ env.PACKAGE_VERSION }} \
          -OutputDirectory ./output
          
    - name: Push to NuGet
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
      run: dotnet nuget push ./output/*.nupkg --api-key $NUGET_API_KEY --source https://api.nuget.org/v3/index.json
