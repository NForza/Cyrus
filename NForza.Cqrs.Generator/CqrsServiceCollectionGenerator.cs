using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using NForza.Cqrs.Generator.Config;

#pragma warning disable RS1035 // Do not use banned APIs for analyzers

namespace NForza.Cqrs.Generator;

[Generator]
public class CqrsServiceCollectionGenerator : CqrsSourceGenerator, ISourceGenerator
{
    public override void Execute(GeneratorExecutionContext context)
    {
#if DEBUG //remove the 1 to enable debugging when compiling source code
        //This will launch the debugger when the generator is running
        //You might have to do a Rebuild to get the generator to run
        if (!Debugger.IsAttached)
        {
            Debugger.Launch();
        }
#endif
        var configuration = ParseConfigFile<CqrsConfig>(context, "cqrsConfig.yaml");

        IEnumerable<string> contractSuffix = configuration.Contracts;
        var commandSuffix = configuration.Commands.Suffix;
        var methodHandlerName = configuration.Commands.HandlerName;

        var commands = GetAllCommands(context.Compilation, contractSuffix, commandSuffix).ToList();
        var handlers = GetAllCommandHandlers(context, methodHandlerName, commands);

        GenerateServiceCollectionExtensions(context, handlers);
    }

    private void GenerateServiceCollectionExtensions(GeneratorExecutionContext context, List<IMethodSymbol> handlers)
    {
        StringBuilder source = new();
        source.Append($@"// <auto-generated/>
using System;
using Microsoft.Extensions.DependencyInjection;

namespace NForza.Cqrs;

public static class ServiceCollectionExtensions
{{
    public static IServiceCollection AddCqrs(this IServiceCollection services, Action<CqrsOptions>? options = null)
    {{
        options?.Invoke(new CqrsOptions(services));
        services.AddSingleton<ICommandDispatcher, CommandDispatcher>();
        services.AddSingleton<ICommandBus, LocalCommandBus>(); 
        services.AddSingleton<IEventBus, EventBus>(); 
        services.AddSingleton(BuildHandlerDictionary());");
        foreach (var typeToRegister in handlers.Select(h => h.ContainingType).Distinct(SymbolEqualityComparer.Default))
        {
            source.Append($@"
        services.AddTransient<{typeToRegister.ToDisplayString()}>();");
        }


        source.Append($@"
        return services;
    }}

    public static HandlerDictionary BuildHandlerDictionary()
    {{
        var handlers = new HandlerDictionary();");
        foreach (var handler in handlers)
        {
            var handlerReturnType = handler.ReturnType;
            var commandType = handler.Parameters[0].Type;
            var typeSymbol = handler.ContainingType;

            source.Append($@"
        handlers.AddHandler<{commandType}>((services, command) => services.GetRequiredService<{typeSymbol}>().Execute(({commandType})command));");
        }
        source.Append($@"
        return handlers;
    }}
}}");
        context.AddSource($"ServiceCollectionExtensions.g.cs", source.ToString());
    }
}